// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace PACKET {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Packet {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_PACKET_Position__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::PACKET.Position, global::PACKET.Position.Builder> internal__static_PACKET_Position__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_PACKET_CS_LOGIN_REQ__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::PACKET.CS_LOGIN_REQ, global::PACKET.CS_LOGIN_REQ.Builder> internal__static_PACKET_CS_LOGIN_REQ__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_PACKET_SC_LOGIN_ACK__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::PACKET.SC_LOGIN_ACK, global::PACKET.SC_LOGIN_ACK.Builder> internal__static_PACKET_SC_LOGIN_ACK__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_PACKET_SC_INSERT_UNIT_ACK__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::PACKET.SC_INSERT_UNIT_ACK, global::PACKET.SC_INSERT_UNIT_ACK.Builder> internal__static_PACKET_SC_INSERT_UNIT_ACK__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_PACKET_SC_REMOVE_UNIT_ACK__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::PACKET.SC_REMOVE_UNIT_ACK, global::PACKET.SC_REMOVE_UNIT_ACK.Builder> internal__static_PACKET_SC_REMOVE_UNIT_ACK__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_PACKET_SC_MOVE_UNIT_ACK__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::PACKET.SC_MOVE_UNIT_ACK, global::PACKET.SC_MOVE_UNIT_ACK.Builder> internal__static_PACKET_SC_MOVE_UNIT_ACK__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Packet() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgxwYWNrZXQucHJvdG8SBlBBQ0tFVCIrCghQb3NpdGlvbhIJCgF4GAEgAigF" + 
          "EgkKAXkYAiACKAUSCQoBehgDIAIoBSIaCgxDU19MT0dJTl9SRVESCgoCaWQY" + 
          "ASACKAwiKgoMU0NfTE9HSU5fQUNLEgoKAmlkGAEgAigMEg4KBnJlc3VsdBgC" + 
          "IAIoBSJoChJTQ19JTlNFUlRfVU5JVF9BQ0sSEgoKb2JqZWN0X2tleRgBIAIo" + 
          "BRIMCgR0eXBlGAIgAigFEgwKBHRlYW0YAyACKAUSIgoIcG9zaXRpb24YBCAC" + 
          "KAsyEC5QQUNLRVQuUG9zaXRpb24iKAoSU0NfUkVNT1ZFX1VOSVRfQUNLEhIK" + 
          "Cm9iamVjdF9rZXkYASACKAUiXQoQU0NfTU9WRV9VTklUX0FDSxISCgpvYmpl" + 
          "Y3Rfa2V5GAEgAigFEhEKCW1vdmVfdHlwZRgCIAIoBRIiCghwb3NpdGlvbhgD" + 
          "IAIoCzIQLlBBQ0tFVC5Qb3NpdGlvbir/AQoLUEFDS0VUX1RZUEUSEQoNZUNT" + 
          "X0xPR0lOX1JFURABEhEKDWVTQ19MT0dJTl9BQ0sQAhIYChNlQ1NfSU5TRVJU" + 
          "X1VOSVRfUkVREMgBEhgKE2VTQ19JTlNFUlRfVU5JVF9BQ0sQyQESGAoTZUNT" + 
          "X1JFTU9WRV9VTklUX1JFURDKARIYChNlU0NfUkVNT1ZFX1VOSVRfQUNLEMsB" + 
          "EhYKEWVDU19NT1ZFX1VOSVRfUkVREMwBEhYKEWVTQ19NT1ZFX1VOSVRfQUNL" + 
          "EM0BEhgKE2VDU19DSEFOR0VfVU5JVF9SRVEQ0gESGAoTZVNDX0NIQU5HRV9V" + 
          "TklUX0FDSxDTAQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_PACKET_Position__Descriptor = Descriptor.MessageTypes[0];
        internal__static_PACKET_Position__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::PACKET.Position, global::PACKET.Position.Builder>(internal__static_PACKET_Position__Descriptor,
                new string[] { "X", "Y", "Z", });
        internal__static_PACKET_CS_LOGIN_REQ__Descriptor = Descriptor.MessageTypes[1];
        internal__static_PACKET_CS_LOGIN_REQ__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::PACKET.CS_LOGIN_REQ, global::PACKET.CS_LOGIN_REQ.Builder>(internal__static_PACKET_CS_LOGIN_REQ__Descriptor,
                new string[] { "Id", });
        internal__static_PACKET_SC_LOGIN_ACK__Descriptor = Descriptor.MessageTypes[2];
        internal__static_PACKET_SC_LOGIN_ACK__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::PACKET.SC_LOGIN_ACK, global::PACKET.SC_LOGIN_ACK.Builder>(internal__static_PACKET_SC_LOGIN_ACK__Descriptor,
                new string[] { "Id", "Result", });
        internal__static_PACKET_SC_INSERT_UNIT_ACK__Descriptor = Descriptor.MessageTypes[3];
        internal__static_PACKET_SC_INSERT_UNIT_ACK__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::PACKET.SC_INSERT_UNIT_ACK, global::PACKET.SC_INSERT_UNIT_ACK.Builder>(internal__static_PACKET_SC_INSERT_UNIT_ACK__Descriptor,
                new string[] { "ObjectKey", "Type", "Team", "Position", });
        internal__static_PACKET_SC_REMOVE_UNIT_ACK__Descriptor = Descriptor.MessageTypes[4];
        internal__static_PACKET_SC_REMOVE_UNIT_ACK__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::PACKET.SC_REMOVE_UNIT_ACK, global::PACKET.SC_REMOVE_UNIT_ACK.Builder>(internal__static_PACKET_SC_REMOVE_UNIT_ACK__Descriptor,
                new string[] { "ObjectKey", });
        internal__static_PACKET_SC_MOVE_UNIT_ACK__Descriptor = Descriptor.MessageTypes[5];
        internal__static_PACKET_SC_MOVE_UNIT_ACK__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::PACKET.SC_MOVE_UNIT_ACK, global::PACKET.SC_MOVE_UNIT_ACK.Builder>(internal__static_PACKET_SC_MOVE_UNIT_ACK__Descriptor,
                new string[] { "ObjectKey", "MoveType", "Position", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum PACKET_TYPE {
    eCS_LOGIN_REQ = 1,
    eSC_LOGIN_ACK = 2,
    eCS_INSERT_UNIT_REQ = 200,
    eSC_INSERT_UNIT_ACK = 201,
    eCS_REMOVE_UNIT_REQ = 202,
    eSC_REMOVE_UNIT_ACK = 203,
    eCS_MOVE_UNIT_REQ = 204,
    eSC_MOVE_UNIT_ACK = 205,
    eCS_CHANGE_UNIT_REQ = 210,
    eSC_CHANGE_UNIT_ACK = 211,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Position : pb::GeneratedMessage<Position, Position.Builder> {
    private Position() { }
    private static readonly Position defaultInstance = new Position().MakeReadOnly();
    private static readonly string[] _positionFieldNames = new string[] { "x", "y", "z" };
    private static readonly uint[] _positionFieldTags = new uint[] { 8, 16, 24 };
    public static Position DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Position DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Position ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PACKET.Packet.internal__static_PACKET_Position__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Position, Position.Builder> InternalFieldAccessors {
      get { return global::PACKET.Packet.internal__static_PACKET_Position__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private int x_;
    public bool HasX {
      get { return hasX; }
    }
    public int X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private int y_;
    public bool HasY {
      get { return hasY; }
    }
    public int Y {
      get { return y_; }
    }
    
    public const int ZFieldNumber = 3;
    private bool hasZ;
    private int z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public int Z {
      get { return z_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasX) return false;
        if (!hasY) return false;
        if (!hasZ) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _positionFieldNames;
      if (hasX) {
        output.WriteInt32(1, field_names[0], X);
      }
      if (hasY) {
        output.WriteInt32(2, field_names[1], Y);
      }
      if (hasZ) {
        output.WriteInt32(3, field_names[2], Z);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasX) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Y);
        }
        if (hasZ) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Z);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Position ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Position ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Position ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Position ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Position ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Position ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Position ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Position ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Position ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Position ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Position MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Position prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Position, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Position cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Position result;
      
      private Position PrepareBuilder() {
        if (resultIsReadOnly) {
          Position original = result;
          result = new Position();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Position MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PACKET.Position.Descriptor; }
      }
      
      public override Position DefaultInstanceForType {
        get { return global::PACKET.Position.DefaultInstance; }
      }
      
      public override Position BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Position) {
          return MergeFrom((Position) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Position other) {
        if (other == global::PACKET.Position.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_positionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _positionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasX = input.ReadInt32(ref result.x_);
              break;
            }
            case 16: {
              result.hasY = input.ReadInt32(ref result.y_);
              break;
            }
            case 24: {
              result.hasZ = input.ReadInt32(ref result.z_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public int X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(int value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public int Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(int value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
      
      public bool HasZ {
        get { return result.hasZ; }
      }
      public int Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(int value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0;
        return this;
      }
    }
    static Position() {
      object.ReferenceEquals(global::PACKET.Packet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CS_LOGIN_REQ : pb::GeneratedMessage<CS_LOGIN_REQ, CS_LOGIN_REQ.Builder> {
    private CS_LOGIN_REQ() { }
    private static readonly CS_LOGIN_REQ defaultInstance = new CS_LOGIN_REQ().MakeReadOnly();
    private static readonly string[] _cSLOGINREQFieldNames = new string[] { "id" };
    private static readonly uint[] _cSLOGINREQFieldTags = new uint[] { 10 };
    public static CS_LOGIN_REQ DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CS_LOGIN_REQ DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CS_LOGIN_REQ ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PACKET.Packet.internal__static_PACKET_CS_LOGIN_REQ__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CS_LOGIN_REQ, CS_LOGIN_REQ.Builder> InternalFieldAccessors {
      get { return global::PACKET.Packet.internal__static_PACKET_CS_LOGIN_REQ__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private pb::ByteString id_ = pb::ByteString.Empty;
    public bool HasId {
      get { return hasId; }
    }
    public pb::ByteString Id {
      get { return id_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cSLOGINREQFieldNames;
      if (hasId) {
        output.WriteBytes(1, field_names[0], Id);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Id);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CS_LOGIN_REQ ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CS_LOGIN_REQ ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CS_LOGIN_REQ ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CS_LOGIN_REQ ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CS_LOGIN_REQ ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CS_LOGIN_REQ ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CS_LOGIN_REQ ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CS_LOGIN_REQ ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CS_LOGIN_REQ ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CS_LOGIN_REQ ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CS_LOGIN_REQ MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CS_LOGIN_REQ prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CS_LOGIN_REQ, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CS_LOGIN_REQ cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CS_LOGIN_REQ result;
      
      private CS_LOGIN_REQ PrepareBuilder() {
        if (resultIsReadOnly) {
          CS_LOGIN_REQ original = result;
          result = new CS_LOGIN_REQ();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CS_LOGIN_REQ MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PACKET.CS_LOGIN_REQ.Descriptor; }
      }
      
      public override CS_LOGIN_REQ DefaultInstanceForType {
        get { return global::PACKET.CS_LOGIN_REQ.DefaultInstance; }
      }
      
      public override CS_LOGIN_REQ BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CS_LOGIN_REQ) {
          return MergeFrom((CS_LOGIN_REQ) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CS_LOGIN_REQ other) {
        if (other == global::PACKET.CS_LOGIN_REQ.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cSLOGINREQFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cSLOGINREQFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadBytes(ref result.id_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public pb::ByteString Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = pb::ByteString.Empty;
        return this;
      }
    }
    static CS_LOGIN_REQ() {
      object.ReferenceEquals(global::PACKET.Packet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SC_LOGIN_ACK : pb::GeneratedMessage<SC_LOGIN_ACK, SC_LOGIN_ACK.Builder> {
    private SC_LOGIN_ACK() { }
    private static readonly SC_LOGIN_ACK defaultInstance = new SC_LOGIN_ACK().MakeReadOnly();
    private static readonly string[] _sCLOGINACKFieldNames = new string[] { "id", "result" };
    private static readonly uint[] _sCLOGINACKFieldTags = new uint[] { 10, 16 };
    public static SC_LOGIN_ACK DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SC_LOGIN_ACK DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SC_LOGIN_ACK ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PACKET.Packet.internal__static_PACKET_SC_LOGIN_ACK__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SC_LOGIN_ACK, SC_LOGIN_ACK.Builder> InternalFieldAccessors {
      get { return global::PACKET.Packet.internal__static_PACKET_SC_LOGIN_ACK__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private pb::ByteString id_ = pb::ByteString.Empty;
    public bool HasId {
      get { return hasId; }
    }
    public pb::ByteString Id {
      get { return id_; }
    }
    
    public const int ResultFieldNumber = 2;
    private bool hasResult;
    private int result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public int Result {
      get { return result_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasResult) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sCLOGINACKFieldNames;
      if (hasId) {
        output.WriteBytes(1, field_names[0], Id);
      }
      if (hasResult) {
        output.WriteInt32(2, field_names[1], Result);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Id);
        }
        if (hasResult) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Result);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SC_LOGIN_ACK ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SC_LOGIN_ACK ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SC_LOGIN_ACK ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SC_LOGIN_ACK ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SC_LOGIN_ACK ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SC_LOGIN_ACK ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SC_LOGIN_ACK ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SC_LOGIN_ACK ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SC_LOGIN_ACK ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SC_LOGIN_ACK ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SC_LOGIN_ACK MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SC_LOGIN_ACK prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SC_LOGIN_ACK, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SC_LOGIN_ACK cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SC_LOGIN_ACK result;
      
      private SC_LOGIN_ACK PrepareBuilder() {
        if (resultIsReadOnly) {
          SC_LOGIN_ACK original = result;
          result = new SC_LOGIN_ACK();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SC_LOGIN_ACK MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PACKET.SC_LOGIN_ACK.Descriptor; }
      }
      
      public override SC_LOGIN_ACK DefaultInstanceForType {
        get { return global::PACKET.SC_LOGIN_ACK.DefaultInstance; }
      }
      
      public override SC_LOGIN_ACK BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SC_LOGIN_ACK) {
          return MergeFrom((SC_LOGIN_ACK) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SC_LOGIN_ACK other) {
        if (other == global::PACKET.SC_LOGIN_ACK.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasResult) {
          Result = other.Result;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sCLOGINACKFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sCLOGINACKFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadBytes(ref result.id_);
              break;
            }
            case 16: {
              result.hasResult = input.ReadInt32(ref result.result_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public pb::ByteString Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public int Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(int value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = 0;
        return this;
      }
    }
    static SC_LOGIN_ACK() {
      object.ReferenceEquals(global::PACKET.Packet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SC_INSERT_UNIT_ACK : pb::GeneratedMessage<SC_INSERT_UNIT_ACK, SC_INSERT_UNIT_ACK.Builder> {
    private SC_INSERT_UNIT_ACK() { }
    private static readonly SC_INSERT_UNIT_ACK defaultInstance = new SC_INSERT_UNIT_ACK().MakeReadOnly();
    private static readonly string[] _sCINSERTUNITACKFieldNames = new string[] { "object_key", "position", "team", "type" };
    private static readonly uint[] _sCINSERTUNITACKFieldTags = new uint[] { 8, 34, 24, 16 };
    public static SC_INSERT_UNIT_ACK DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SC_INSERT_UNIT_ACK DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SC_INSERT_UNIT_ACK ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PACKET.Packet.internal__static_PACKET_SC_INSERT_UNIT_ACK__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SC_INSERT_UNIT_ACK, SC_INSERT_UNIT_ACK.Builder> InternalFieldAccessors {
      get { return global::PACKET.Packet.internal__static_PACKET_SC_INSERT_UNIT_ACK__FieldAccessorTable; }
    }
    
    public const int ObjectKeyFieldNumber = 1;
    private bool hasObjectKey;
    private int objectKey_;
    public bool HasObjectKey {
      get { return hasObjectKey; }
    }
    public int ObjectKey {
      get { return objectKey_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int TeamFieldNumber = 3;
    private bool hasTeam;
    private int team_;
    public bool HasTeam {
      get { return hasTeam; }
    }
    public int Team {
      get { return team_; }
    }
    
    public const int PositionFieldNumber = 4;
    private bool hasPosition;
    private global::PACKET.Position position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::PACKET.Position Position {
      get { return position_ ?? global::PACKET.Position.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasObjectKey) return false;
        if (!hasType) return false;
        if (!hasTeam) return false;
        if (!hasPosition) return false;
        if (!Position.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sCINSERTUNITACKFieldNames;
      if (hasObjectKey) {
        output.WriteInt32(1, field_names[0], ObjectKey);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[3], Type);
      }
      if (hasTeam) {
        output.WriteInt32(3, field_names[2], Team);
      }
      if (hasPosition) {
        output.WriteMessage(4, field_names[1], Position);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasObjectKey) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, ObjectKey);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
        }
        if (hasTeam) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Team);
        }
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Position);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SC_INSERT_UNIT_ACK ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SC_INSERT_UNIT_ACK ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SC_INSERT_UNIT_ACK ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SC_INSERT_UNIT_ACK ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SC_INSERT_UNIT_ACK ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SC_INSERT_UNIT_ACK ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SC_INSERT_UNIT_ACK ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SC_INSERT_UNIT_ACK ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SC_INSERT_UNIT_ACK ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SC_INSERT_UNIT_ACK ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SC_INSERT_UNIT_ACK MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SC_INSERT_UNIT_ACK prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SC_INSERT_UNIT_ACK, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SC_INSERT_UNIT_ACK cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SC_INSERT_UNIT_ACK result;
      
      private SC_INSERT_UNIT_ACK PrepareBuilder() {
        if (resultIsReadOnly) {
          SC_INSERT_UNIT_ACK original = result;
          result = new SC_INSERT_UNIT_ACK();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SC_INSERT_UNIT_ACK MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PACKET.SC_INSERT_UNIT_ACK.Descriptor; }
      }
      
      public override SC_INSERT_UNIT_ACK DefaultInstanceForType {
        get { return global::PACKET.SC_INSERT_UNIT_ACK.DefaultInstance; }
      }
      
      public override SC_INSERT_UNIT_ACK BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SC_INSERT_UNIT_ACK) {
          return MergeFrom((SC_INSERT_UNIT_ACK) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SC_INSERT_UNIT_ACK other) {
        if (other == global::PACKET.SC_INSERT_UNIT_ACK.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasObjectKey) {
          ObjectKey = other.ObjectKey;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasTeam) {
          Team = other.Team;
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sCINSERTUNITACKFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sCINSERTUNITACKFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasObjectKey = input.ReadInt32(ref result.objectKey_);
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 24: {
              result.hasTeam = input.ReadInt32(ref result.team_);
              break;
            }
            case 34: {
              global::PACKET.Position.Builder subBuilder = global::PACKET.Position.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasObjectKey {
        get { return result.hasObjectKey; }
      }
      public int ObjectKey {
        get { return result.ObjectKey; }
        set { SetObjectKey(value); }
      }
      public Builder SetObjectKey(int value) {
        PrepareBuilder();
        result.hasObjectKey = true;
        result.objectKey_ = value;
        return this;
      }
      public Builder ClearObjectKey() {
        PrepareBuilder();
        result.hasObjectKey = false;
        result.objectKey_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasTeam {
        get { return result.hasTeam; }
      }
      public int Team {
        get { return result.Team; }
        set { SetTeam(value); }
      }
      public Builder SetTeam(int value) {
        PrepareBuilder();
        result.hasTeam = true;
        result.team_ = value;
        return this;
      }
      public Builder ClearTeam() {
        PrepareBuilder();
        result.hasTeam = false;
        result.team_ = 0;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::PACKET.Position Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::PACKET.Position value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::PACKET.Position.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::PACKET.Position value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::PACKET.Position.DefaultInstance) {
            result.position_ = global::PACKET.Position.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
    }
    static SC_INSERT_UNIT_ACK() {
      object.ReferenceEquals(global::PACKET.Packet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SC_REMOVE_UNIT_ACK : pb::GeneratedMessage<SC_REMOVE_UNIT_ACK, SC_REMOVE_UNIT_ACK.Builder> {
    private SC_REMOVE_UNIT_ACK() { }
    private static readonly SC_REMOVE_UNIT_ACK defaultInstance = new SC_REMOVE_UNIT_ACK().MakeReadOnly();
    private static readonly string[] _sCREMOVEUNITACKFieldNames = new string[] { "object_key" };
    private static readonly uint[] _sCREMOVEUNITACKFieldTags = new uint[] { 8 };
    public static SC_REMOVE_UNIT_ACK DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SC_REMOVE_UNIT_ACK DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SC_REMOVE_UNIT_ACK ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PACKET.Packet.internal__static_PACKET_SC_REMOVE_UNIT_ACK__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SC_REMOVE_UNIT_ACK, SC_REMOVE_UNIT_ACK.Builder> InternalFieldAccessors {
      get { return global::PACKET.Packet.internal__static_PACKET_SC_REMOVE_UNIT_ACK__FieldAccessorTable; }
    }
    
    public const int ObjectKeyFieldNumber = 1;
    private bool hasObjectKey;
    private int objectKey_;
    public bool HasObjectKey {
      get { return hasObjectKey; }
    }
    public int ObjectKey {
      get { return objectKey_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasObjectKey) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sCREMOVEUNITACKFieldNames;
      if (hasObjectKey) {
        output.WriteInt32(1, field_names[0], ObjectKey);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasObjectKey) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, ObjectKey);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SC_REMOVE_UNIT_ACK ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SC_REMOVE_UNIT_ACK ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SC_REMOVE_UNIT_ACK ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SC_REMOVE_UNIT_ACK ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SC_REMOVE_UNIT_ACK ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SC_REMOVE_UNIT_ACK ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SC_REMOVE_UNIT_ACK ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SC_REMOVE_UNIT_ACK ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SC_REMOVE_UNIT_ACK ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SC_REMOVE_UNIT_ACK ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SC_REMOVE_UNIT_ACK MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SC_REMOVE_UNIT_ACK prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SC_REMOVE_UNIT_ACK, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SC_REMOVE_UNIT_ACK cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SC_REMOVE_UNIT_ACK result;
      
      private SC_REMOVE_UNIT_ACK PrepareBuilder() {
        if (resultIsReadOnly) {
          SC_REMOVE_UNIT_ACK original = result;
          result = new SC_REMOVE_UNIT_ACK();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SC_REMOVE_UNIT_ACK MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PACKET.SC_REMOVE_UNIT_ACK.Descriptor; }
      }
      
      public override SC_REMOVE_UNIT_ACK DefaultInstanceForType {
        get { return global::PACKET.SC_REMOVE_UNIT_ACK.DefaultInstance; }
      }
      
      public override SC_REMOVE_UNIT_ACK BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SC_REMOVE_UNIT_ACK) {
          return MergeFrom((SC_REMOVE_UNIT_ACK) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SC_REMOVE_UNIT_ACK other) {
        if (other == global::PACKET.SC_REMOVE_UNIT_ACK.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasObjectKey) {
          ObjectKey = other.ObjectKey;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sCREMOVEUNITACKFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sCREMOVEUNITACKFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasObjectKey = input.ReadInt32(ref result.objectKey_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasObjectKey {
        get { return result.hasObjectKey; }
      }
      public int ObjectKey {
        get { return result.ObjectKey; }
        set { SetObjectKey(value); }
      }
      public Builder SetObjectKey(int value) {
        PrepareBuilder();
        result.hasObjectKey = true;
        result.objectKey_ = value;
        return this;
      }
      public Builder ClearObjectKey() {
        PrepareBuilder();
        result.hasObjectKey = false;
        result.objectKey_ = 0;
        return this;
      }
    }
    static SC_REMOVE_UNIT_ACK() {
      object.ReferenceEquals(global::PACKET.Packet.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SC_MOVE_UNIT_ACK : pb::GeneratedMessage<SC_MOVE_UNIT_ACK, SC_MOVE_UNIT_ACK.Builder> {
    private SC_MOVE_UNIT_ACK() { }
    private static readonly SC_MOVE_UNIT_ACK defaultInstance = new SC_MOVE_UNIT_ACK().MakeReadOnly();
    private static readonly string[] _sCMOVEUNITACKFieldNames = new string[] { "move_type", "object_key", "position" };
    private static readonly uint[] _sCMOVEUNITACKFieldTags = new uint[] { 16, 8, 26 };
    public static SC_MOVE_UNIT_ACK DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SC_MOVE_UNIT_ACK DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SC_MOVE_UNIT_ACK ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::PACKET.Packet.internal__static_PACKET_SC_MOVE_UNIT_ACK__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SC_MOVE_UNIT_ACK, SC_MOVE_UNIT_ACK.Builder> InternalFieldAccessors {
      get { return global::PACKET.Packet.internal__static_PACKET_SC_MOVE_UNIT_ACK__FieldAccessorTable; }
    }
    
    public const int ObjectKeyFieldNumber = 1;
    private bool hasObjectKey;
    private int objectKey_;
    public bool HasObjectKey {
      get { return hasObjectKey; }
    }
    public int ObjectKey {
      get { return objectKey_; }
    }
    
    public const int MoveTypeFieldNumber = 2;
    private bool hasMoveType;
    private int moveType_;
    public bool HasMoveType {
      get { return hasMoveType; }
    }
    public int MoveType {
      get { return moveType_; }
    }
    
    public const int PositionFieldNumber = 3;
    private bool hasPosition;
    private global::PACKET.Position position_;
    public bool HasPosition {
      get { return hasPosition; }
    }
    public global::PACKET.Position Position {
      get { return position_ ?? global::PACKET.Position.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasObjectKey) return false;
        if (!hasMoveType) return false;
        if (!hasPosition) return false;
        if (!Position.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sCMOVEUNITACKFieldNames;
      if (hasObjectKey) {
        output.WriteInt32(1, field_names[1], ObjectKey);
      }
      if (hasMoveType) {
        output.WriteInt32(2, field_names[0], MoveType);
      }
      if (hasPosition) {
        output.WriteMessage(3, field_names[2], Position);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasObjectKey) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, ObjectKey);
        }
        if (hasMoveType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, MoveType);
        }
        if (hasPosition) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Position);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SC_MOVE_UNIT_ACK ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SC_MOVE_UNIT_ACK ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SC_MOVE_UNIT_ACK ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SC_MOVE_UNIT_ACK ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SC_MOVE_UNIT_ACK ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SC_MOVE_UNIT_ACK ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SC_MOVE_UNIT_ACK ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SC_MOVE_UNIT_ACK ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SC_MOVE_UNIT_ACK ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SC_MOVE_UNIT_ACK ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SC_MOVE_UNIT_ACK MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SC_MOVE_UNIT_ACK prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SC_MOVE_UNIT_ACK, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SC_MOVE_UNIT_ACK cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SC_MOVE_UNIT_ACK result;
      
      private SC_MOVE_UNIT_ACK PrepareBuilder() {
        if (resultIsReadOnly) {
          SC_MOVE_UNIT_ACK original = result;
          result = new SC_MOVE_UNIT_ACK();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SC_MOVE_UNIT_ACK MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::PACKET.SC_MOVE_UNIT_ACK.Descriptor; }
      }
      
      public override SC_MOVE_UNIT_ACK DefaultInstanceForType {
        get { return global::PACKET.SC_MOVE_UNIT_ACK.DefaultInstance; }
      }
      
      public override SC_MOVE_UNIT_ACK BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SC_MOVE_UNIT_ACK) {
          return MergeFrom((SC_MOVE_UNIT_ACK) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SC_MOVE_UNIT_ACK other) {
        if (other == global::PACKET.SC_MOVE_UNIT_ACK.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasObjectKey) {
          ObjectKey = other.ObjectKey;
        }
        if (other.HasMoveType) {
          MoveType = other.MoveType;
        }
        if (other.HasPosition) {
          MergePosition(other.Position);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sCMOVEUNITACKFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sCMOVEUNITACKFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasObjectKey = input.ReadInt32(ref result.objectKey_);
              break;
            }
            case 16: {
              result.hasMoveType = input.ReadInt32(ref result.moveType_);
              break;
            }
            case 26: {
              global::PACKET.Position.Builder subBuilder = global::PACKET.Position.CreateBuilder();
              if (result.hasPosition) {
                subBuilder.MergeFrom(Position);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Position = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasObjectKey {
        get { return result.hasObjectKey; }
      }
      public int ObjectKey {
        get { return result.ObjectKey; }
        set { SetObjectKey(value); }
      }
      public Builder SetObjectKey(int value) {
        PrepareBuilder();
        result.hasObjectKey = true;
        result.objectKey_ = value;
        return this;
      }
      public Builder ClearObjectKey() {
        PrepareBuilder();
        result.hasObjectKey = false;
        result.objectKey_ = 0;
        return this;
      }
      
      public bool HasMoveType {
        get { return result.hasMoveType; }
      }
      public int MoveType {
        get { return result.MoveType; }
        set { SetMoveType(value); }
      }
      public Builder SetMoveType(int value) {
        PrepareBuilder();
        result.hasMoveType = true;
        result.moveType_ = value;
        return this;
      }
      public Builder ClearMoveType() {
        PrepareBuilder();
        result.hasMoveType = false;
        result.moveType_ = 0;
        return this;
      }
      
      public bool HasPosition {
       get { return result.hasPosition; }
      }
      public global::PACKET.Position Position {
        get { return result.Position; }
        set { SetPosition(value); }
      }
      public Builder SetPosition(global::PACKET.Position value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = value;
        return this;
      }
      public Builder SetPosition(global::PACKET.Position.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPosition = true;
        result.position_ = builderForValue.Build();
        return this;
      }
      public Builder MergePosition(global::PACKET.Position value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPosition &&
            result.position_ != global::PACKET.Position.DefaultInstance) {
            result.position_ = global::PACKET.Position.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
        } else {
          result.position_ = value;
        }
        result.hasPosition = true;
        return this;
      }
      public Builder ClearPosition() {
        PrepareBuilder();
        result.hasPosition = false;
        result.position_ = null;
        return this;
      }
    }
    static SC_MOVE_UNIT_ACK() {
      object.ReferenceEquals(global::PACKET.Packet.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
