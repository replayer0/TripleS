// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PACKET {

namespace {

const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_LOGIN_REQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_LOGIN_REQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_LOGIN_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_LOGIN_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_INSERT_UNIT_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_INSERT_UNIT_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_REMOVE_UNIT_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_REMOVE_UNIT_ACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_MOVE_UNIT_ACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_MOVE_UNIT_ACK_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PACKET_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_packet_2eproto() {
  protobuf_AddDesc_packet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "packet.proto");
  GOOGLE_CHECK(file != NULL);
  Position_descriptor_ = file->message_type(0);
  static const int Position_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, z_),
  };
  Position_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Position));
  CS_LOGIN_REQ_descriptor_ = file->message_type(1);
  static const int CS_LOGIN_REQ_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LOGIN_REQ, id_),
  };
  CS_LOGIN_REQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_LOGIN_REQ_descriptor_,
      CS_LOGIN_REQ::default_instance_,
      CS_LOGIN_REQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LOGIN_REQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LOGIN_REQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_LOGIN_REQ));
  SC_LOGIN_ACK_descriptor_ = file->message_type(2);
  static const int SC_LOGIN_ACK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOGIN_ACK, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOGIN_ACK, result_),
  };
  SC_LOGIN_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_LOGIN_ACK_descriptor_,
      SC_LOGIN_ACK::default_instance_,
      SC_LOGIN_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOGIN_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOGIN_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_LOGIN_ACK));
  SC_INSERT_UNIT_ACK_descriptor_ = file->message_type(3);
  static const int SC_INSERT_UNIT_ACK_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_INSERT_UNIT_ACK, object_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_INSERT_UNIT_ACK, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_INSERT_UNIT_ACK, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_INSERT_UNIT_ACK, position_),
  };
  SC_INSERT_UNIT_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_INSERT_UNIT_ACK_descriptor_,
      SC_INSERT_UNIT_ACK::default_instance_,
      SC_INSERT_UNIT_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_INSERT_UNIT_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_INSERT_UNIT_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_INSERT_UNIT_ACK));
  SC_REMOVE_UNIT_ACK_descriptor_ = file->message_type(4);
  static const int SC_REMOVE_UNIT_ACK_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_REMOVE_UNIT_ACK, object_key_),
  };
  SC_REMOVE_UNIT_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_REMOVE_UNIT_ACK_descriptor_,
      SC_REMOVE_UNIT_ACK::default_instance_,
      SC_REMOVE_UNIT_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_REMOVE_UNIT_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_REMOVE_UNIT_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_REMOVE_UNIT_ACK));
  SC_MOVE_UNIT_ACK_descriptor_ = file->message_type(5);
  static const int SC_MOVE_UNIT_ACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_MOVE_UNIT_ACK, object_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_MOVE_UNIT_ACK, move_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_MOVE_UNIT_ACK, position_),
  };
  SC_MOVE_UNIT_ACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_MOVE_UNIT_ACK_descriptor_,
      SC_MOVE_UNIT_ACK::default_instance_,
      SC_MOVE_UNIT_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_MOVE_UNIT_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_MOVE_UNIT_ACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_MOVE_UNIT_ACK));
  PACKET_TYPE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_packet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_LOGIN_REQ_descriptor_, &CS_LOGIN_REQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_LOGIN_ACK_descriptor_, &SC_LOGIN_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_INSERT_UNIT_ACK_descriptor_, &SC_INSERT_UNIT_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_REMOVE_UNIT_ACK_descriptor_, &SC_REMOVE_UNIT_ACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_MOVE_UNIT_ACK_descriptor_, &SC_MOVE_UNIT_ACK::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_packet_2eproto() {
  delete Position::default_instance_;
  delete Position_reflection_;
  delete CS_LOGIN_REQ::default_instance_;
  delete CS_LOGIN_REQ_reflection_;
  delete SC_LOGIN_ACK::default_instance_;
  delete SC_LOGIN_ACK_reflection_;
  delete SC_INSERT_UNIT_ACK::default_instance_;
  delete SC_INSERT_UNIT_ACK_reflection_;
  delete SC_REMOVE_UNIT_ACK::default_instance_;
  delete SC_REMOVE_UNIT_ACK_reflection_;
  delete SC_MOVE_UNIT_ACK::default_instance_;
  delete SC_MOVE_UNIT_ACK_reflection_;
}

void protobuf_AddDesc_packet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014packet.proto\022\006PACKET\"+\n\010Position\022\t\n\001x\030"
    "\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\t\n\001z\030\003 \002(\005\"\032\n\014CS_LOGIN_"
    "REQ\022\n\n\002id\030\001 \002(\014\"*\n\014SC_LOGIN_ACK\022\n\n\002id\030\001 "
    "\002(\014\022\016\n\006result\030\002 \002(\005\"h\n\022SC_INSERT_UNIT_AC"
    "K\022\022\n\nobject_key\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\014\n\004t"
    "eam\030\003 \002(\005\022\"\n\010position\030\004 \002(\0132\020.PACKET.Pos"
    "ition\"(\n\022SC_REMOVE_UNIT_ACK\022\022\n\nobject_ke"
    "y\030\001 \002(\005\"]\n\020SC_MOVE_UNIT_ACK\022\022\n\nobject_ke"
    "y\030\001 \002(\005\022\021\n\tmove_type\030\002 \002(\005\022\"\n\010position\030\003"
    " \002(\0132\020.PACKET.Position*\377\001\n\013PACKET_TYPE\022\021"
    "\n\reCS_LOGIN_REQ\020\001\022\021\n\reSC_LOGIN_ACK\020\002\022\030\n\023"
    "eCS_INSERT_UNIT_REQ\020\310\001\022\030\n\023eSC_INSERT_UNI"
    "T_ACK\020\311\001\022\030\n\023eCS_REMOVE_UNIT_REQ\020\312\001\022\030\n\023eS"
    "C_REMOVE_UNIT_ACK\020\313\001\022\026\n\021eCS_MOVE_UNIT_RE"
    "Q\020\314\001\022\026\n\021eSC_MOVE_UNIT_ACK\020\315\001\022\030\n\023eCS_CHAN"
    "GE_UNIT_REQ\020\322\001\022\030\n\023eSC_CHANGE_UNIT_ACK\020\323\001", 640);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packet.proto", &protobuf_RegisterTypes);
  Position::default_instance_ = new Position();
  CS_LOGIN_REQ::default_instance_ = new CS_LOGIN_REQ();
  SC_LOGIN_ACK::default_instance_ = new SC_LOGIN_ACK();
  SC_INSERT_UNIT_ACK::default_instance_ = new SC_INSERT_UNIT_ACK();
  SC_REMOVE_UNIT_ACK::default_instance_ = new SC_REMOVE_UNIT_ACK();
  SC_MOVE_UNIT_ACK::default_instance_ = new SC_MOVE_UNIT_ACK();
  Position::default_instance_->InitAsDefaultInstance();
  CS_LOGIN_REQ::default_instance_->InitAsDefaultInstance();
  SC_LOGIN_ACK::default_instance_->InitAsDefaultInstance();
  SC_INSERT_UNIT_ACK::default_instance_->InitAsDefaultInstance();
  SC_REMOVE_UNIT_ACK::default_instance_->InitAsDefaultInstance();
  SC_MOVE_UNIT_ACK::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_packet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_packet_2eproto {
  StaticDescriptorInitializer_packet_2eproto() {
    protobuf_AddDesc_packet_2eproto();
  }
} static_descriptor_initializer_packet_2eproto_;
const ::google::protobuf::EnumDescriptor* PACKET_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PACKET_TYPE_descriptor_;
}
bool PACKET_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 210:
    case 211:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Position::kXFieldNumber;
const int Position::kYFieldNumber;
const int Position::kZFieldNumber;
#endif  // !_MSC_VER

Position::Position()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PACKET.Position)
}

void Position::InitAsDefaultInstance() {
}

Position::Position(const Position& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PACKET.Position)
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:PACKET.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New() const {
  return new Position;
}

void Position::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Position*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PACKET.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // required int32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PACKET.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PACKET.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PACKET.Position)
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PACKET.Position)
}

::google::protobuf::uint8* Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PACKET.Position)
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PACKET.Position)
  return target;
}

int Position::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Position* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Position*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Position::Swap(Position* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_LOGIN_REQ::kIdFieldNumber;
#endif  // !_MSC_VER

CS_LOGIN_REQ::CS_LOGIN_REQ()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PACKET.CS_LOGIN_REQ)
}

void CS_LOGIN_REQ::InitAsDefaultInstance() {
}

CS_LOGIN_REQ::CS_LOGIN_REQ(const CS_LOGIN_REQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PACKET.CS_LOGIN_REQ)
}

void CS_LOGIN_REQ::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_LOGIN_REQ::~CS_LOGIN_REQ() {
  // @@protoc_insertion_point(destructor:PACKET.CS_LOGIN_REQ)
  SharedDtor();
}

void CS_LOGIN_REQ::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void CS_LOGIN_REQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_LOGIN_REQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_LOGIN_REQ_descriptor_;
}

const CS_LOGIN_REQ& CS_LOGIN_REQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

CS_LOGIN_REQ* CS_LOGIN_REQ::default_instance_ = NULL;

CS_LOGIN_REQ* CS_LOGIN_REQ::New() const {
  return new CS_LOGIN_REQ;
}

void CS_LOGIN_REQ::Clear() {
  if (has_id()) {
    if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_LOGIN_REQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PACKET.CS_LOGIN_REQ)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PACKET.CS_LOGIN_REQ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PACKET.CS_LOGIN_REQ)
  return false;
#undef DO_
}

void CS_LOGIN_REQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PACKET.CS_LOGIN_REQ)
  // required bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PACKET.CS_LOGIN_REQ)
}

::google::protobuf::uint8* CS_LOGIN_REQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PACKET.CS_LOGIN_REQ)
  // required bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PACKET.CS_LOGIN_REQ)
  return target;
}

int CS_LOGIN_REQ::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_LOGIN_REQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_LOGIN_REQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_LOGIN_REQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_LOGIN_REQ::MergeFrom(const CS_LOGIN_REQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_LOGIN_REQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_LOGIN_REQ::CopyFrom(const CS_LOGIN_REQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_LOGIN_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CS_LOGIN_REQ::Swap(CS_LOGIN_REQ* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_LOGIN_REQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_LOGIN_REQ_descriptor_;
  metadata.reflection = CS_LOGIN_REQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_LOGIN_ACK::kIdFieldNumber;
const int SC_LOGIN_ACK::kResultFieldNumber;
#endif  // !_MSC_VER

SC_LOGIN_ACK::SC_LOGIN_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PACKET.SC_LOGIN_ACK)
}

void SC_LOGIN_ACK::InitAsDefaultInstance() {
}

SC_LOGIN_ACK::SC_LOGIN_ACK(const SC_LOGIN_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PACKET.SC_LOGIN_ACK)
}

void SC_LOGIN_ACK::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_LOGIN_ACK::~SC_LOGIN_ACK() {
  // @@protoc_insertion_point(destructor:PACKET.SC_LOGIN_ACK)
  SharedDtor();
}

void SC_LOGIN_ACK::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void SC_LOGIN_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LOGIN_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_LOGIN_ACK_descriptor_;
}

const SC_LOGIN_ACK& SC_LOGIN_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

SC_LOGIN_ACK* SC_LOGIN_ACK::default_instance_ = NULL;

SC_LOGIN_ACK* SC_LOGIN_ACK::New() const {
  return new SC_LOGIN_ACK;
}

void SC_LOGIN_ACK::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_LOGIN_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PACKET.SC_LOGIN_ACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PACKET.SC_LOGIN_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PACKET.SC_LOGIN_ACK)
  return false;
#undef DO_
}

void SC_LOGIN_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PACKET.SC_LOGIN_ACK)
  // required bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PACKET.SC_LOGIN_ACK)
}

::google::protobuf::uint8* SC_LOGIN_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PACKET.SC_LOGIN_ACK)
  // required bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PACKET.SC_LOGIN_ACK)
  return target;
}

int SC_LOGIN_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LOGIN_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_LOGIN_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_LOGIN_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_LOGIN_ACK::MergeFrom(const SC_LOGIN_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_LOGIN_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LOGIN_ACK::CopyFrom(const SC_LOGIN_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LOGIN_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SC_LOGIN_ACK::Swap(SC_LOGIN_ACK* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_LOGIN_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_LOGIN_ACK_descriptor_;
  metadata.reflection = SC_LOGIN_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_INSERT_UNIT_ACK::kObjectKeyFieldNumber;
const int SC_INSERT_UNIT_ACK::kTypeFieldNumber;
const int SC_INSERT_UNIT_ACK::kTeamFieldNumber;
const int SC_INSERT_UNIT_ACK::kPositionFieldNumber;
#endif  // !_MSC_VER

SC_INSERT_UNIT_ACK::SC_INSERT_UNIT_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PACKET.SC_INSERT_UNIT_ACK)
}

void SC_INSERT_UNIT_ACK::InitAsDefaultInstance() {
  position_ = const_cast< ::PACKET::Position*>(&::PACKET::Position::default_instance());
}

SC_INSERT_UNIT_ACK::SC_INSERT_UNIT_ACK(const SC_INSERT_UNIT_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PACKET.SC_INSERT_UNIT_ACK)
}

void SC_INSERT_UNIT_ACK::SharedCtor() {
  _cached_size_ = 0;
  object_key_ = 0;
  type_ = 0;
  team_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_INSERT_UNIT_ACK::~SC_INSERT_UNIT_ACK() {
  // @@protoc_insertion_point(destructor:PACKET.SC_INSERT_UNIT_ACK)
  SharedDtor();
}

void SC_INSERT_UNIT_ACK::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void SC_INSERT_UNIT_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_INSERT_UNIT_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_INSERT_UNIT_ACK_descriptor_;
}

const SC_INSERT_UNIT_ACK& SC_INSERT_UNIT_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

SC_INSERT_UNIT_ACK* SC_INSERT_UNIT_ACK::default_instance_ = NULL;

SC_INSERT_UNIT_ACK* SC_INSERT_UNIT_ACK::New() const {
  return new SC_INSERT_UNIT_ACK;
}

void SC_INSERT_UNIT_ACK::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SC_INSERT_UNIT_ACK*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(object_key_, type_);
    team_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::PACKET::Position::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_INSERT_UNIT_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PACKET.SC_INSERT_UNIT_ACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 object_key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &object_key_)));
          set_has_object_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_team;
        break;
      }

      // required int32 team = 3;
      case 3: {
        if (tag == 24) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_position;
        break;
      }

      // required .PACKET.Position position = 4;
      case 4: {
        if (tag == 34) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PACKET.SC_INSERT_UNIT_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PACKET.SC_INSERT_UNIT_ACK)
  return false;
#undef DO_
}

void SC_INSERT_UNIT_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PACKET.SC_INSERT_UNIT_ACK)
  // required int32 object_key = 1;
  if (has_object_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->object_key(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 team = 3;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->team(), output);
  }

  // required .PACKET.Position position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PACKET.SC_INSERT_UNIT_ACK)
}

::google::protobuf::uint8* SC_INSERT_UNIT_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PACKET.SC_INSERT_UNIT_ACK)
  // required int32 object_key = 1;
  if (has_object_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->object_key(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 team = 3;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->team(), target);
  }

  // required .PACKET.Position position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PACKET.SC_INSERT_UNIT_ACK)
  return target;
}

int SC_INSERT_UNIT_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 object_key = 1;
    if (has_object_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->object_key());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 team = 3;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

    // required .PACKET.Position position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_INSERT_UNIT_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_INSERT_UNIT_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_INSERT_UNIT_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_INSERT_UNIT_ACK::MergeFrom(const SC_INSERT_UNIT_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_key()) {
      set_object_key(from.object_key());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_position()) {
      mutable_position()->::PACKET::Position::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_INSERT_UNIT_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_INSERT_UNIT_ACK::CopyFrom(const SC_INSERT_UNIT_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_INSERT_UNIT_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void SC_INSERT_UNIT_ACK::Swap(SC_INSERT_UNIT_ACK* other) {
  if (other != this) {
    std::swap(object_key_, other->object_key_);
    std::swap(type_, other->type_);
    std::swap(team_, other->team_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_INSERT_UNIT_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_INSERT_UNIT_ACK_descriptor_;
  metadata.reflection = SC_INSERT_UNIT_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_REMOVE_UNIT_ACK::kObjectKeyFieldNumber;
#endif  // !_MSC_VER

SC_REMOVE_UNIT_ACK::SC_REMOVE_UNIT_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PACKET.SC_REMOVE_UNIT_ACK)
}

void SC_REMOVE_UNIT_ACK::InitAsDefaultInstance() {
}

SC_REMOVE_UNIT_ACK::SC_REMOVE_UNIT_ACK(const SC_REMOVE_UNIT_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PACKET.SC_REMOVE_UNIT_ACK)
}

void SC_REMOVE_UNIT_ACK::SharedCtor() {
  _cached_size_ = 0;
  object_key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_REMOVE_UNIT_ACK::~SC_REMOVE_UNIT_ACK() {
  // @@protoc_insertion_point(destructor:PACKET.SC_REMOVE_UNIT_ACK)
  SharedDtor();
}

void SC_REMOVE_UNIT_ACK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_REMOVE_UNIT_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_REMOVE_UNIT_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_REMOVE_UNIT_ACK_descriptor_;
}

const SC_REMOVE_UNIT_ACK& SC_REMOVE_UNIT_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

SC_REMOVE_UNIT_ACK* SC_REMOVE_UNIT_ACK::default_instance_ = NULL;

SC_REMOVE_UNIT_ACK* SC_REMOVE_UNIT_ACK::New() const {
  return new SC_REMOVE_UNIT_ACK;
}

void SC_REMOVE_UNIT_ACK::Clear() {
  object_key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_REMOVE_UNIT_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PACKET.SC_REMOVE_UNIT_ACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 object_key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &object_key_)));
          set_has_object_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PACKET.SC_REMOVE_UNIT_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PACKET.SC_REMOVE_UNIT_ACK)
  return false;
#undef DO_
}

void SC_REMOVE_UNIT_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PACKET.SC_REMOVE_UNIT_ACK)
  // required int32 object_key = 1;
  if (has_object_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->object_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PACKET.SC_REMOVE_UNIT_ACK)
}

::google::protobuf::uint8* SC_REMOVE_UNIT_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PACKET.SC_REMOVE_UNIT_ACK)
  // required int32 object_key = 1;
  if (has_object_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->object_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PACKET.SC_REMOVE_UNIT_ACK)
  return target;
}

int SC_REMOVE_UNIT_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 object_key = 1;
    if (has_object_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->object_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_REMOVE_UNIT_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_REMOVE_UNIT_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_REMOVE_UNIT_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_REMOVE_UNIT_ACK::MergeFrom(const SC_REMOVE_UNIT_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_key()) {
      set_object_key(from.object_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_REMOVE_UNIT_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_REMOVE_UNIT_ACK::CopyFrom(const SC_REMOVE_UNIT_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_REMOVE_UNIT_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SC_REMOVE_UNIT_ACK::Swap(SC_REMOVE_UNIT_ACK* other) {
  if (other != this) {
    std::swap(object_key_, other->object_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_REMOVE_UNIT_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_REMOVE_UNIT_ACK_descriptor_;
  metadata.reflection = SC_REMOVE_UNIT_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_MOVE_UNIT_ACK::kObjectKeyFieldNumber;
const int SC_MOVE_UNIT_ACK::kMoveTypeFieldNumber;
const int SC_MOVE_UNIT_ACK::kPositionFieldNumber;
#endif  // !_MSC_VER

SC_MOVE_UNIT_ACK::SC_MOVE_UNIT_ACK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PACKET.SC_MOVE_UNIT_ACK)
}

void SC_MOVE_UNIT_ACK::InitAsDefaultInstance() {
  position_ = const_cast< ::PACKET::Position*>(&::PACKET::Position::default_instance());
}

SC_MOVE_UNIT_ACK::SC_MOVE_UNIT_ACK(const SC_MOVE_UNIT_ACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PACKET.SC_MOVE_UNIT_ACK)
}

void SC_MOVE_UNIT_ACK::SharedCtor() {
  _cached_size_ = 0;
  object_key_ = 0;
  move_type_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_MOVE_UNIT_ACK::~SC_MOVE_UNIT_ACK() {
  // @@protoc_insertion_point(destructor:PACKET.SC_MOVE_UNIT_ACK)
  SharedDtor();
}

void SC_MOVE_UNIT_ACK::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void SC_MOVE_UNIT_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_MOVE_UNIT_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_MOVE_UNIT_ACK_descriptor_;
}

const SC_MOVE_UNIT_ACK& SC_MOVE_UNIT_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

SC_MOVE_UNIT_ACK* SC_MOVE_UNIT_ACK::default_instance_ = NULL;

SC_MOVE_UNIT_ACK* SC_MOVE_UNIT_ACK::New() const {
  return new SC_MOVE_UNIT_ACK;
}

void SC_MOVE_UNIT_ACK::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SC_MOVE_UNIT_ACK*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(object_key_, move_type_);
    if (has_position()) {
      if (position_ != NULL) position_->::PACKET::Position::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_MOVE_UNIT_ACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PACKET.SC_MOVE_UNIT_ACK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 object_key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &object_key_)));
          set_has_object_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_move_type;
        break;
      }

      // required int32 move_type = 2;
      case 2: {
        if (tag == 16) {
         parse_move_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_type_)));
          set_has_move_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // required .PACKET.Position position = 3;
      case 3: {
        if (tag == 26) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PACKET.SC_MOVE_UNIT_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PACKET.SC_MOVE_UNIT_ACK)
  return false;
#undef DO_
}

void SC_MOVE_UNIT_ACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PACKET.SC_MOVE_UNIT_ACK)
  // required int32 object_key = 1;
  if (has_object_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->object_key(), output);
  }

  // required int32 move_type = 2;
  if (has_move_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->move_type(), output);
  }

  // required .PACKET.Position position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PACKET.SC_MOVE_UNIT_ACK)
}

::google::protobuf::uint8* SC_MOVE_UNIT_ACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PACKET.SC_MOVE_UNIT_ACK)
  // required int32 object_key = 1;
  if (has_object_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->object_key(), target);
  }

  // required int32 move_type = 2;
  if (has_move_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->move_type(), target);
  }

  // required .PACKET.Position position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PACKET.SC_MOVE_UNIT_ACK)
  return target;
}

int SC_MOVE_UNIT_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 object_key = 1;
    if (has_object_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->object_key());
    }

    // required int32 move_type = 2;
    if (has_move_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_type());
    }

    // required .PACKET.Position position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_MOVE_UNIT_ACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_MOVE_UNIT_ACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_MOVE_UNIT_ACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_MOVE_UNIT_ACK::MergeFrom(const SC_MOVE_UNIT_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_key()) {
      set_object_key(from.object_key());
    }
    if (from.has_move_type()) {
      set_move_type(from.move_type());
    }
    if (from.has_position()) {
      mutable_position()->::PACKET::Position::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_MOVE_UNIT_ACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_MOVE_UNIT_ACK::CopyFrom(const SC_MOVE_UNIT_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_MOVE_UNIT_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void SC_MOVE_UNIT_ACK::Swap(SC_MOVE_UNIT_ACK* other) {
  if (other != this) {
    std::swap(object_key_, other->object_key_);
    std::swap(move_type_, other->move_type_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_MOVE_UNIT_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_MOVE_UNIT_ACK_descriptor_;
  metadata.reflection = SC_MOVE_UNIT_ACK_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PACKET

// @@protoc_insertion_point(global_scope)
